#!/usr/bin/env python

import sys

# HACK
sys.path.extend(['/vagrant', '/vagrant/env/lib/python2.7/site-packages'])

import argparse
import os
import signal
from subprocess import call
import time
import uuid

from tot import fs
from tot.config import get_user_mount_dir
from tot.config import setup_config
from tot.config import Session
from tot.logger import Logger
from tot.logger import read_logs
from tot.tracer.strace import STraceTracer


def import_logs(args):
    from tot.db import TotDatabase

    db = TotDatabase(args.db, reset=True)

    for log_file in args.log_files:
        db.load(read_logs(log_file))

    return 0


def main(argv):
    # Build command-line parser.
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser.add_argument('--log', default='tot.log',
                        help='log file')
    parser.add_argument('--log-fs', default='tot-fs.log',
                        help='log fs file')
    parser.add_argument('--db', default='tot.db', help='database file')
    parser.add_argument('--chroot')

    # log command.
    parser_log = subparsers.add_parser(
        'log', help='log command')
    parser_log.set_defaults(func=None)

    # import command.
    parser_import = subparsers.add_parser(
        'import', help='import logs')
    parser_import.add_argument('log_files', nargs='*',
                               help='log files to import')
    parser_import.set_defaults(func=import_logs)

    # Parse command line arguments.
    args, rest = parser.parse_known_args(argv)

    if args.func:
        return args.func(args)

    # Setup user config.
    setup_config()
    mount_dir = get_user_mount_dir()

    if not args.chroot:
        # Need to setup chroot fs.

        session = Session()

        # Setup fs shim.
        child_pid = os.fork()
        if child_pid == 0:
            logger_fs = Logger(open(args.log_fs, 'a'))
            tot_fs = fs.TotFS(session, logger_fs.log)
            tot_fs.mount(mount_dir)
            # Runs forever.

        assert child_pid != 0

        # Wait for mount to setup.
        while not os.listdir(mount_dir):
            time.sleep(.01)

        # Rexecute within chroot.
        tot = os.path.abspath(__file__)
        retcode = call(
            ['tot-chroot', tot, '--chroot', str(session.id)] + sys.argv[1:])

        # TODO: use counter scheme unmount only when all tot processes for a
        # user are done.
        # Kill mount process.
        os.kill(child_pid, signal.SIGKILL)
        fs.unmount(mount_dir)

        return retcode

    # chroot fs is already in place, start tracing.
    # Setup logger.
    logger = Logger(open(args.log, 'a'))

    # Run tracer and log events.
    cmd = rest
    session = Session(id=args.chroot)
    tracer = STraceTracer(session)
    for row in tracer.trace(cmd):
        logger.log(row)

    return tracer.retcode


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
